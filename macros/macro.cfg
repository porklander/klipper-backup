######################### PRESSURE ADVANCE #########################

# This will just set a default value for PA per filament temp. 
# If PS/SS filament gcode sets pressure advance, it will take precendence over this, as it runs after.
# Pretty hacky way to do it, but it works. Better way would probably be to pass filament type as a variable.

[gcode_macro TEMPADJUSTPA]
gcode:
	# ABS
	{% if printer.heater_bed.target >= 100 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.0
	## PETG
	#{% elif printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
	#	SET_PRESSURE_ADVANCE ADVANCE=
	# PLA
	{% elif printer.heater_bed.target <= 65 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.035
	# Catch-all
	{% else %}
		SET_PRESSURE_ADVANCE ADVANCE=0.055
	{% endif %}

######################### PRINT START / END #########################

[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in PRINT_START2
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
; gcode parameters for area bed mesh
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:		
    SET_GCODE_OFFSET Z=0 ;Offset auf 0 setzen
	# Parameters
    {% set prime_start_x = printer["gcode_macro _User_Variables"].prime_start_x %}
    {% set prime_start_y = printer["gcode_macro _User_Variables"].prime_start_y %}
    {% set prime_z = printer["gcode_macro _User_Variables"].prime_z %}
    {% set prime_lenght = printer["gcode_macro _User_Variables"].prime_lenght %}
	{% set bed = params.BED|int %}
	{% set hotend = params.EXTRUDER|int %}
	{% set chamber = params.CHAMBER|default(0)|int %}

	# Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}
    #SKEW_PROFILE LOAD=my_skew_profile
	
	UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=0  													; cancel exhaust off timer (if there is one)
	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0      												; cancel off timer (if there is one)
	#SET_PIN PIN=caselight VALUE=1																		; turn on case light
	RESETSPEEDS																							; reset speed, accel etc to configured values
	#RESETRGB																							; reset LCD RGB
    status_heating
	SET_FAN_SPEED FAN=nevermore SPEED=0.5																; set Nevermore to 50%
    M190 S{bed}
	M104 S160																							; set hotend to no-ooze temp
	cG28																								; home
	G90																									; absolute positioning
	{% if printer["temperature_sensor chamber"].temperature < chamber %}				                ; - if chamber is not at temp yet:
		HEATSOAK T={bed} MOVE=1																			; 	heatsoak macro + park in center
		M140 S{bed+20} 																					; 	wait for bed final temp
  		TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber}	           				; 	wait for chamber final temp
	{% else %}																							; - if chamber is already at temp:
		{% if printer.heater_bed.temperature < (bed-2) %}												; -- but bed is not fully heated (within 2C):
			HEATSOAK T={bed} MOVE=1																		; 		heatsoak and park
			M190 S{bed} 																				; 		wait for bed final temp
		{% else %}																						; -- and bed is already heated:
			HEATSOAK T={bed} MOVE=0																		; 		"heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
		{% endif %}
	{% endif %}
    M190 S{bed}
	M106 S0																								; turn off part cooling fan (from heatsoak)
	BED_MESH_CLEAR																						; clear bed mesh
	ATTACH_PROBE_LOCK																					; attach klicky + lock
	QUAD_GANTRY_LEVEL																					; quad gantry level
	G90 													 											; absolute positioning
	G0 Z20																								; hop up to prevent knocking probe off after homing Z
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500					; move to center of bed to prevent knocking probe off after homing Z (otherwise QGL just moves our Z hop down again before traveling)
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")} ; mesh nur im Druckbereich
    DOCK_PROBE_UNLOCK																					; stow probe, unlock
	G0 X125 Z10 Y{printer.toolhead.axis_maximum.y} F19500												; move to right of nozzle brush
	M109 S{hotend}  																					; set & wait for hotend final temp
	CLEANNOZZLE																							; clean nozzle while hot
	TEMPADJUSTPA																						; change PA based on bed temp
	CALIBRATE_Z																							; calibrate z offset with hot nozzle
    _SET_PLATE_OFFSET
    SET_GCODE_OFFSET Z_ADJUST={params.Z_ADJUST|default(0.0)|float} MOVE=1                               ; Adjust the G-Code Z offset if needed
    SWIPENOZZLE																							; swipe nozzle brush on way to print purge line
	SET_FAN_SPEED FAN=Exhaust SPEED=0.1																; set chamber fan to 10%
	G92 E0                              																; reset Extruder
	G1 X{prime_start_x|int} Y{prime_start_y|int} Z{prime_z|int} F19500.0								; move to start position
	G1 Y{prime_lenght|int} F1500.0 E15     																; draw the first line
	G92 E0                              																; reset Extruder
	G1 Z2.0 F3000                       																; move Z Axis up
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1												; enable filament sensor
    status_printing

[gcode_macro PRINT_END]
gcode:
	#RESETRGB																							; revert LCD RGB
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0													; disable filament sensor
	CLEAR_PAUSE																							; clear pause (from M191) if there is one
	{% if printer.heater_bed.temperature >= 100 %}												
		SET_FAN_SPEED FAN=Exhaust SPEED=1  																; crank exhaust fan to 100% to evacuate chamber
	{% endif %}													
	M400                         	   																	; wait for buffer to clear
	G92 E0                        	    																; zero the extruder
    G91
    #G1 Z2 F3000
    G0 E-10 F60
	M104 S0						 	    			 													; turn only the hotend off
	M140 S0												                                                ; return the bed to temp, some slicers like to turn it off
    M107                         	   			 	 													; turn off part cooling fan
	G91                             							 										; relative positioning
    G1 Z150 F3000                  	    			 													; move nozzle up 5mm
    G90                           	    			 													; absolute positioning
	G1 X{printer.toolhead.axis_maximum.x-10} Y{printer.toolhead.axis_maximum.y-10} F19500.0  			; park nozzle at rear
	BED_MESH_CLEAR																						; clear bed mesh									
	UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=120													; turn exhaust off in 2 min
	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=1800	 												; turn everything off in 30 min
	RESETSPEEDS																							; reset speed, accel etc to configured max values
	SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0														; disable XYE steppers (not z)
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
    #SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0
    #SET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0
    #SET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0
    #SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0

[delayed_gcode EXHAUST_OFF]
gcode:
	SET_FAN_SPEED FAN=Exhaust SPEED=0

[delayed_gcode DELAYED_OFF]
gcode:
	OFF  															; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)
	
[gcode_macro CLEANNOZZLE]
gcode:
    M117 Cleannozzle..
	# Parameters
    {% set brush_x_middle = printer["gcode_macro _User_Variables"].brush_x_middle %}
    {% set brush_x_width = printer["gcode_macro _User_Variables"].brush_x_width %}
    {% set brush_y_start = printer["gcode_macro _User_Variables"].brush_y_start %}
    {% set wipe_z = printer["gcode_macro _User_Variables"].wipe_z %}
    {% set z_purge = printer["gcode_macro _User_Variables"].z_purge %}
	# Iterations
	{% set i = printer["gcode_macro _User_Variables"].I|default(5)|int %}
	# Speed
	{% set s = printer["gcode_macro _User_Variables"].S|default(6000)|int %}
	
	CG28
	SAVE_GCODE_STATE NAME=CLEANNOZZLE
    status_cleaning
	G90																; absolute positioning
	G0 X{brush_x_middle - brush_x_width/2} Y{brush_y_start} Z{z_purge} F19500 			; move to right of nozzle brush
	G0 Z{wipe_z}	F19500											; lower
	{% for iteration in range(i|int) %}
		G0 X{brush_x_middle + brush_x_width/2} F{s}					; wipe back
		G0 X{brush_x_middle - brush_x_width/2}	F{s}				; wipe forth
	{% endfor %}
	G0 X{brush_x_middle|int + brush_x_width/2}	F{s}			    ; wipe back
  	G0 Z{z_purge}  F19500										    ; raise
	RESTORE_GCODE_STATE NAME=CLEANNOZZLE
    M117
	
[gcode_macro SWIPENOZZLE]
gcode:
    M117 Swipenozzle..
    {% set brush_x_middle = printer["gcode_macro _User_Variables"].brush_x_middle %}
    {% set brush_x_width = printer["gcode_macro _User_Variables"].brush_x_width %}
    {% set brush_y_start = printer["gcode_macro _User_Variables"].brush_y_start %}
    {% set wipe_z = printer["gcode_macro _User_Variables"].wipe_z %}
    {% set z_purge = printer["gcode_macro _User_Variables"].z_purge %}
	CG28
	SAVE_GCODE_STATE NAME=SWIPENOZZLE
	G90																; absolute positioning
    G0 X{brush_x_middle - brush_x_width/2} Y{brush_y_start} Z{z_purge}  F19500 			; move to right of nozzle brush
	G92 E0                        	    																; zero the extruder
    G1 E10 F3000
	G92 E0
    G0 Z{wipe_z}	F19500													; lower
	G0 X{brush_x_middle + brush_x_width/2} F2400			; wipe back
	G0 Z{z_purge} 	F19500										; raise
	RESTORE_GCODE_STATE NAME=SWIPENOZZLE
    M117

######################### PAUSE/RESUME/CANCEL #########################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	# Parameters
	{% set z = params.Z|default(10)|int %}																					; z hop amount
	
	{% if printer['pause_resume'].is_paused|int == 0 %}		
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}									    						; set z hop variable for reference in resume macro
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}									; set hotend temp variable for reference in resume macro
								
		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0																	; disable filament sensor		
		SAVE_GCODE_STATE NAME=PAUSE																							; save current print position for resume				
		BASE_PAUSE																											; pause print
		{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}										; check that zhop doesn't exceed z max
			G91																												; relative positioning
			G1 Z{z} F900																									; raise Z up by z hop amount
		{% else %}
			{ action_respond_info("Pause zhop exceeds maximum Z height.") }													; if z max is exceeded, show message and set zhop value for resume to 0
			SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
		{% endif %}
		G90																													; absolute positioning
		G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500									; park toolhead at front center
		SAVE_GCODE_STATE NAME=PAUSEPARK																						; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)	
		M104 S0																												; turn off hotend
		SET_IDLE_TIMEOUT TIMEOUT=43200															    						; set timeout to 12 hours
	{% endif %}

# Return Z hop back down 10mm, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
	# Parameters
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1																	; enable filament sensor
		RESETRGB																											; reset LCD color
		SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}											; set timeout back to configured value
		{% if etemp > 0 %}
			M109 S{etemp|int}																								; wait for hotend to heat back up
		{% endif %}
		RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450															; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)	
		G91																													; relative positioning
		M83																													; relative extruder positioning
		{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}												
			G1 Z{zhop * -1} E{e} F900																						; prime nozzle by E, lower Z back down
		{% else %}						
			G1 Z{zhop * -1} F900																							; lower Z back down	without priming (just in case we are testing the macro with cold hotend)
		{% endif %}								
		RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450																; restore position
		BASE_RESUME																											; resume print
	{% endif %}

# Filament runout / change alias	
[gcode_macro M600]
gcode:
	LCDRGB R=0 G=1 B=0	# Turn LCD green
	PAUSE
	
# Disable filament sensor 1 sec after startup, only enable during prints (in PRINT_START/PRINT_END)
[delayed_gcode DISABLEFILAMENTSENSOR]	
initial_duration: 1
gcode:
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	
	


######################### MISC #########################

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
	#Parameters
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+5}

[gcode_macro RESETSPEEDS]
gcode:
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

[gcode_macro G32]
gcode:
	G28
	ATTACH_PROBE_LOCK
	BED_MESH_CLEAR
	QUAD_GANTRY_LEVEL
	G28 Z
	DOCK_PROBE_UNLOCK

[gcode_macro HEATSOAK]
gcode:
	# Parameters
	{% set t = params.T|default(110)|int %}
	{% set move = params.MOVE|default(1)|int %}

	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)
	SET_FAN_SPEED FAN=Exhaust SPEED=0		 		; turn off exhaust fan
	#SET_PIN PIN=caselight VALUE=1					; turn on case light
	M140 S{t}										; heat bed
	{% if t >= 100 %}
		M104 S180									; set hotend to no-ooze temp
		M106 S205 									; turn on part fan (80%)
	{% else %}
		M106 S0 									; turn part fan off
	{% endif %}
	{% if move == 1 %}
		CG28										; conditional home
		PARKCENTER						 			; move to bed
	{% endif %}

	
######################### FILAMENT #########################

[gcode_macro UNLOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=UNLOADFILAMENT
	M83                                   ; set extruder to relative
	G1 E10 F600                           ; extrude a little to soften tip 
	G1 E-100 F1800                        ; retract filament completely
	RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=LOADFILAMENT
	M83 ; set extruder to relative
	G1 E90 F600
	RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    UNLOAD_FILAMENT
	
[gcode_macro HOT_LOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    LOAD_FILAMENT


		

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
	M84												; turn steppers off
    TURN_OFF_HEATERS								; turn bed / hotend off
    M107                         	   			 	; turn print cooling fan off
	SET_FAN_SPEED FAN=Exhaust SPEED=0  				; turn exhaust fan off
	SET_FAN_SPEED FAN=BedOuter SPEED=0				; bed fan off
	SET_FAN_SPEED FAN=BedInner SPEED=0				; bed fan off
	#SET_PIN PIN=caselight VALUE=0					; turn light off

######################### CONDITIONAL HOMING #########################

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
        status_homing
		G28 X Y Z
	{% endif %}
	
# Conditional G28 (home if not already homed)
[gcode_macro XYCG28]
gcode:
	{% if "xy" not in printer.toolhead.homed_axes %}
        status_homing
		G28 X Y
	{% endif %}

[gcode_macro ZCG28]
gcode:
	{% if "z" not in printer.toolhead.homed_axes %}
        status_homing
		G28 Z
	{% endif %}

######################### PARKING #########################

# Park front center
[gcode_macro PARKFRONT]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500		
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500										
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park top rear left
[gcode_macro PARKREAR]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKREAR
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500		
	RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER
	
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKBED
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500										
	RESTORE_GCODE_STATE NAME=PARKBED

# Convert Marlin linear advance commands to SET_PRESSURE_ADVANCE.
# Used in conjunction with Marlin's linear advance calibration tool: https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set k = params.K|default(0)|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={k}

######################### FLUIDD WEB MACROS #########################

# These are specified as macros just so they show up in Fluidd/Mainsail.

[gcode_macro SETPA]
gcode:
	# Parameters
	{% set pa = params.PA|default(0)|float %}

	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro SETPASMOOTH]
gcode:
	# Parameters
	{% set smooth = params.SMOOTH|default(0)|float %}
	
	SET_PRESSURE_ADVANCE SMOOTH_TIME={smooth}

[gcode_macro _SET_Z_CURRENT_HOME]
description: Helper: Set Z-drive motor current
gcode:
    {% set z_home = printer["gcode_macro _User_Variables"].z_home_current %}
    SET_TMC_CURRENT STEPPER=stepper_z  CURRENT={z_home}
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={z_home}
    SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={z_home}
    SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={z_home}
    M400

[gcode_macro _SET_Z_CURRENT]
description: Helper: Set Z-drive motor current
gcode:
    {% set z_run = printer["gcode_macro _User_Variables"].z_current %}
    SET_TMC_CURRENT STEPPER=stepper_z  CURRENT={z_run}
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={z_run}
    SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={z_run}
    SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={z_run}
    M400

[gcode_macro _SET_ACC_HOME]
description: Helper: Set accel and accel_to_decel value
gcode:
  {% set accel = printer["gcode_macro _User_Variables"].accel / 3 %}
  {% set accel_to_decel = printer["gcode_macro _User_Variables"].deccel / 2 %}
    SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}

[gcode_macro _SET_ACC]
description: Helper: Set accel and accel_to_decel value
gcode:
  {% set accel = printer["gcode_macro _User_Variables"].accel %}
  {% set accel_to_decel = printer["gcode_macro _User_Variables"].deccel %}
    SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

# Quad Gantry Level
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
description: Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount
gcode:
     M117 Quad Gantry Level..
    {% set V = printer["gcode_macro _User_Variables"].verbose %}
    {% if V %}
        { action_respond_info("QG Level") }
    {% endif %}

    _CheckProbe action=query
	G90
    status_leveling
    Attach_Probe
    _SET_Z_CURRENT_HOME
    _SET_ACC_HOME 
    _QUAD_GANTRY_LEVEL {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
            endfor %}
    _SET_Z_CURRENT
    _SET_ACC
    G28 Z
    Dock_Probe
    M117


